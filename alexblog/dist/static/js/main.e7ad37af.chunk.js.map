{"version":3,"sources":["config/Firebase.js","components/layout/SignedIn.js","store/actions/authActions.js","components/layout/SignedOut.js","components/layout/Navbar.js","components/articles/ArticleSummary.js","components/articles/ArticleList.js","components/dashboard/Notifications.js","components/dashboard/Dashboard.js","components/articles/ArticleDetails.js","components/auth/SignIn.js","components/auth/Register.js","components/articles/CreateArticle.js","store/actions/articleActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/articleReducer.js","store/reducers/rootReducer.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","settings","db","connect","dispatch","signOut","getState","auth","then","logout","type","props","className","to","onClick","profile","initials","SignedOut","state","console","log","links","uid","ArticleSummary","article","title","authorFirstName","authorLastName","moment","createdAt","toDate","calendar","ArticleList","articles","map","id","key","Notifications","notifications","item","user","content","time","fromNow","Dashboard","this","Component","compose","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","credentials","signInWithEmailAndPassword","catch","err","Register","firstName","lastName","register","newUser","createUserWithEmailAndPassword","resp","doc","set","CreateArticle","createArticle","history","push","getFirestore","authorId","add","Date","App","exact","path","component","ArticleDetails","Boolean","window","location","hostname","initState","authReducer","action","message","articleReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","store","createStore","applyMiddleware","thunk","withExtraArgument","getFirebase","reduxFirestore","Firebase","rrfProps","config","userProfile","useFirestoreForProfile","createFirestoreInstance","ReactDOM","render","children","useSelector","isLoaded","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7ad37af.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDpdNtkTf3-oRKktMIkeLNnInQW0yQR4ao\",\r\n    authDomain: \"alex-blog-76e50.firebaseapp.com\",\r\n    databaseURL: \"https://alex-blog-76e50.firebaseio.com\",\r\n    projectId: \"alex-blog-76e50\",\r\n    storageBucket: \"alex-blog-76e50.appspot.com\",\r\n    messagingSenderId: \"707902312153\",\r\n    appId: \"1:707902312153:web:ff3690f01da3d8cd7c78c8\",\r\n    measurementId: \"G-YY19RHTQTD\"\r\n  };\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n//firebase.analytics();\r\nfirebase.firestore().settings({});\r\n\r\nconst db = firebase.firestore();\r\nexport { db };\r\n\r\nexport default firebase","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { signOut } from '../../store/actions/authActions'\r\n\r\nconst SignedIn = (props) => {\r\n    return (\r\n        <div>\r\n          <ul className=\"right\">\r\n            <li><NavLink to='/create'>New Article</NavLink></li>\r\n            <li><a onClick={props.signOut}>Log Out</a></li>\r\n            <li><NavLink to='/' className=\"btn btn-floating blue lighten-1\">\r\n              {props.profile.initials}\r\n              </NavLink></li>\r\n          </ul>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut())\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedIn)","import firebase, { db } from '../../config/Firebase';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n//the credentials are email and password\r\nexport const signIn = (credentials) => {\r\n    return (dispatch, getState) => {\r\n      \r\n      //we use the auth services to sign in with email and password\r\n      firebase.auth().signInWithEmailAndPassword(\r\n        credentials.email,\r\n        credentials.password\r\n      ).then(() => {\r\n        dispatch({ type: 'LOGIN_SUCCESS' });\r\n      }).catch((err) => {\r\n        dispatch({ type: 'LOGIN_ERROR', err });\r\n      });\r\n  \r\n    }\r\n  }\r\n\r\n  export const signOut = () => {\r\n    return (dispatch, getState) => {\r\n  \r\n      firebase.auth().signOut().then(() => {\r\n        firebase.logout();\r\n        dispatch({ type: 'SIGNOUT_SUCCESS' })\r\n      });\r\n    }\r\n  }\r\n\r\n  export const register = (newUser) => {\r\n    return (dispatch, getState, firestore) => {\r\n\r\n      //we use a method to create a new user\r\n      firebase.auth().createUserWithEmailAndPassword(\r\n        newUser.email, \r\n        newUser.password\r\n      ).then(resp => {\r\n        //instead of using add() , we use doc to specify the users that we create up with doc()\r\n        return db.collection('users').doc(resp.user.uid).set({\r\n          firstName: newUser.firstName,\r\n          lastName: newUser.lastName,\r\n          initials: newUser.firstName[0] + newUser.lastName[0]\r\n        });\r\n      }).then(() => {\r\n        dispatch({ type: 'REGISTER_SUCCESS' });\r\n      }).catch((err) => {\r\n        dispatch({ type: 'REGISTER_ERROR', err});\r\n      });\r\n    }\r\n  }","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst SignedOut = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"right\">\r\n        <li><NavLink to='/register'>Register</NavLink></li>\r\n        <li><NavLink to='/signin'>Login</NavLink></li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignedOut","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SignedIn from './SignedIn'\r\nimport SignedOut from './SignedOut'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nconst Navbar = (props) => {\r\n    const { auth, profile } = props;\r\n    const links = auth.uid ? <SignedIn profile={profile} /> : <SignedOut />;\r\n    return (\r\n        <nav className=\"nav-wrapper grey darken-3\"> \r\n         <div className=\"container\">\r\n         <Link to='/' className=\"brand-logo\">Alex Blog</Link>\r\n         {links}\r\n         </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return{\r\n        //we return an object\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Navbar)","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst ArticleSummary = ({article}) => {\r\n  return (\r\n    <div className=\"card z-depth-0 project-summary\">\r\n      <div className=\"card-content grey-text text-darken-3\">\r\n        <span className=\"card-title \">{article.title}</span>\r\n        <p>Posted by {article.authorFirstName} {article.authorLastName}</p>\r\n        <p className=\"grey-text\">{moment(article.createdAt.toDate()).calendar()}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArticleSummary","import React from 'react'\r\nimport ArticleSummary from './ArticleSummary'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ArticleList = ({articles}) => {\r\n  return (\r\n    <div className=\"project-list section\">\r\n      {/* we map the articles */}\r\n    { articles && articles.map(article => {\r\n      return (\r\n        <Link to={'/article/' + article.id} key={article.id}>\r\n          <ArticleSummary article={article} />\r\n        </Link>\r\n      )\r\n    })}  \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ArticleList","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Notifications = (props) => {\r\n  const { notifications } = props;\r\n  return (\r\n    <div className=\"section\">\r\n    <div className=\"card z-depth-0\">\r\n      <div className=\"card-content\">\r\n        <span className=\"card-title\">Notifications</span>\r\n        <ul className=\"online-users\">\r\n        { notifications && notifications.map(item => {\r\n              return( \r\n              <li key={item.id}>\r\n                <span className=\"pink-text\">{item.user} </span>\r\n                <span>{item.content}</span>\r\n                <div className=\"note-date grey-text\">\r\n                  {moment(item.time.toDate()).fromNow()}\r\n                </div>\r\n              </li>\r\n            )\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notifications","import React, { Component } from 'react'\r\nimport ArticleList from '../articles/ArticleList'\r\nimport Notifications from './Notifications'\r\nimport {connect} from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n\r\n    const { articles, auth, notifications } = this.props;\r\n    //if there is no uid then redirect to the signin page\r\n    if (!auth.uid) return <Redirect to='/signin' /> \r\n\r\n    return (\r\n      <div className=\"dashboard container\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m6\">\r\n            <ArticleList articles={articles} />\r\n          </div>\r\n          <div className=\"col s12 m5 offset-m1\">\r\n            <Notifications notifications={notifications} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//function that access some data from reducers\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    articles: state.firestore.ordered.articles,\r\n    auth: state.firebase.auth,\r\n    notifications: state.firestore.ordered.notifications\r\n  }\r\n}\r\n\r\n//we use compose to store different enhanch togheter\r\nexport default compose (\r\n  connect(mapStateToProps),\r\n  //with this we connect to which collection we want\r\n  firestoreConnect([\r\n    {collection: 'articles', orderBy: ['createdAt', 'desc']},\r\n    { collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\r\n  ])\r\n)(Dashboard)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport moment from 'moment'\r\n\r\n\r\nconst ArticleDetails = (props) => {\r\n  const { article, auth } = props;\r\n  if (!auth.uid) return <Redirect to='/signin' /> \r\n  if (article) {\r\n    return (\r\n      <div className=\"container section project-details\">\r\n        <div className=\"card z-depth-0\">\r\n          <div className=\"card-content\">\r\n            <span className=\"card-title\">{article.title}</span>\r\n            <p>{article.content}</p>\r\n          </div>\r\n          <div className=\"card-action grey lighten-4 grey-text\">\r\n            <div>Posted by {article.authorFirstName} {article.authorLastName}</div>\r\n            <div>{moment(article.createdAt.toDate()).calendar()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className=\"container center\">\r\n        <p>Loading article...</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//we pass props as a second parameter\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const id = ownProps.match.params.id;\r\n  const articles = state.firestore.data.articles;\r\n  //we make sure if we have articles\r\n  const article = articles ? articles[id] : null\r\n  return {\r\n    article: article,\r\n    auth: state.firebase.auth\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps),\r\n  firestoreConnect([{\r\n    collection: 'articles'\r\n  }])\r\n)(ArticleDetails)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { signIn } from '../../store/actions/authActions'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass SignIn extends Component {\r\n  state = {\r\n    email: '',\r\n    password: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n        //we target the id either of the email or the password when is typed\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    //preventDefault action of the form submitted when page is refreshed\r\n    e.preventDefault();\r\n    this.props.signIn(this.state)\r\n  }\r\n  render() {\r\n    const {authError, auth} = this.props;\r\n    if (auth.uid) return <Redirect to='/' /> \r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\" onSubmit={this.handleSubmit}>\r\n          <h5 className=\"grey-text text-darken-4\">Sign In</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input type=\"email\" id='email' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id='password' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn blue lighten-1 z-depth-0\">Login</button>\r\n            <div className=\"center red-text\">\r\n              { authError ? <p>{authError}</p> : null }\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    authError: state.auth.authError,\r\n    auth: state.firebase.auth\r\n  }\r\n}\r\n\r\n//connect const signIn from reducers to this component\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signIn: (credentials) => dispatch(signIn(credentials))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { register } from '../../store/actions/authActions'\r\n\r\nclass Register extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n    firstName: '',\r\n    lastName: '',\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n        //we target the id either of the email or the password when is typed\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    //preventDefault action of the form submitted when page is refreshed\r\n    e.preventDefault();\r\n    this.props.register(this.state);\r\n\r\n  }\r\n  render() {\r\n    const { auth, authError } = this.props;\r\n    if (auth.uid) return <Redirect to='/' /> \r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\" onSubmit={this.handleSubmit}>\r\n          <h5 className=\"grey-text text-darken-3\">Register</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input type=\"email\" id='email' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id='password' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"firstName\">First Name</label>\r\n            <input type=\"text\" id='firstName' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"lastName\">Last Name</label>\r\n            <input type=\"text\" id='lastName' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn blue lighten-1 z-depth-0\">Register</button>\r\n            <div className=\"center red-text\">\r\n              { authError ? <p>{authError}</p> : null }\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.firebase.auth,\r\n    authError: state.auth.authError\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch)=> {\r\n  return {\r\n    register: (newUser) => dispatch(register(newUser))\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createArticle} from '../../store/actions/articleActions'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass CreateArticle extends Component {\r\n  state = {\r\n    title: '',\r\n    content: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n        //we target the id either of the email or the password when is typed\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    //preventDefault action of the form submitted when page is refreshed\r\n    e.preventDefault();\r\n    //console.log(this.state);\r\n    this.props.createArticle(this.state)\r\n    //redirect after we create a new article\r\n    this.props.history.push('/');\r\n  }\r\n  render() {\r\n    const { auth } = this.props;\r\n    if (!auth.uid) return <Redirect to='/signin' /> \r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"white\" onSubmit={this.handleSubmit}>\r\n          <h5 className=\"grey-text text-darken-4\">Create New Article</h5>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"title\">Title</label>\r\n            <input type=\"text\" id='title' onChange={this.handleChange} />\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <label htmlFor=\"content\">Article Content</label>\r\n         <textarea id='content' className='materialize-textarea' onChange={this.handleChange}></textarea>\r\n          </div>\r\n          <div className=\"input-field\">\r\n            <button className=\"btn blue lighten-1 z-depth-0\">Create</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.firebase.auth\r\n  }\r\n}\r\n\r\n//function that access some data from reducers\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createArticle: (article) => dispatch(createArticle(article))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateArticle)","export const createArticle = (article) => {\r\n    // dispatch - dispatches an action to a reducers\r\n    return (dispatch, getState, {getFirestore}) => {\r\n        const firestore = getFirestore();\r\n        //we grab the profile information and ID from firebase using getState()\r\n        const profile = getState().firebase.profile;\r\n        const authorId = getState().firebase.auth.uid;\r\n        firestore.collection('articles').add({\r\n            ...article,\r\n            authorFirstName: profile.firstName,\r\n            authorLastName: profile.lastName,\r\n            authorId: authorId,\r\n            createdAt: new Date()\r\n          }).then(() => {\r\n            dispatch({ type: 'CREATE_ARTICLE_SUCCESS' });\r\n          }).catch(err => {\r\n            dispatch({ type: 'CREATE_ARTICLE_ERROR' }, err);\r\n          });\r\n        }\r\n        \r\n};","import React, { Component }  from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\nimport ArticleDetails from './components/articles/ArticleDetails'\nimport SignIn from './components/auth/SignIn'\nimport Register from './components/auth/Register'\nimport CreateArticle from './components/articles/CreateArticle'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n        {/* only one route is loaded at a time */}\n          <Switch>\n            {/* Component i want to load */}\n            <Route exact path='/'component={Dashboard} />\n            {/* to load a particular component */}\n            <Route path='/article/:id' component={ArticleDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/register' component={Register} />\n            <Route path='/create' component={CreateArticle} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n  authError: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n  //we use switch statement to check the action type\r\n  switch(action.type){\r\n    case 'LOGIN_ERROR':\r\n      console.log('Login Error');\r\n      return {\r\n        ...state,\r\n        authError: 'Login failed'\r\n      }\r\n    case 'LOGIN_SUCCESS':\r\n      console.log('Login Success');\r\n      return {\r\n        authError: null\r\n      }\r\n    case 'SIGNOUT_SUCCESS':\r\n      console.log('Signout Success');\r\n      return state\r\n   \r\n      \r\n    case 'REGISTER_SUCCESS':\r\n      console.log('Register Success')\r\n      return {\r\n        ...state,\r\n        authError: null\r\n      }\r\n  \r\n    case 'REGISTER_ERROR':\r\n      console.log('Register Error')\r\n      return {\r\n        ...state,\r\n        authError: action.err.message\r\n      }\r\n  \r\n    default:\r\n      return state\r\n  }\r\n};\r\n  \r\nexport default authReducer","const initState = {}\r\n\r\nconst articleReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'CREATE_ARTICLE_SUCCESS':\r\n      console.log('Created article success');\r\n      return state;\r\n    case 'CREATE_ARTICLE_ERROR':\r\n      console.log('Created article error');\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default articleReducer","import authReducer from './authReducer'\r\nimport articleReducer from './articleReducer'\r\nimport { combineReducers } from 'redux'\r\nimport { firestoreReducer } from 'redux-firestore'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  article: articleReducer,\r\n  firestore: firestoreReducer,\r\n  firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore, createFirestoreInstance } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport Firebase from './config/Firebase'\nimport firebase from 'firebase/app'\nimport { useSelector  } from 'react-redux'\nimport { isLoaded  } from 'react-redux-firebase';\n\n\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n        reduxFirestore(firebase, Firebase)\n    )\n);\n\nconst config = {\n    userProfile: 'users',\n    useFirestoreForProfile: true\n}\n\nconst rrfProps = {\n    firebase,\n    config,\n    dispatch: store.dispatch,\n    createFirestoreInstance\n  };\n\n  function AuthIsLoaded({ children }) {\n    const auth = useSelector(state => state.firebase.auth)\n    if (!isLoaded(auth)) return <div>Loading Screen...</div>;\n        return children\n}\n\nReactDOM.render(<Provider store={store}> <ReactReduxFirebaseProvider {...rrfProps}> <AuthIsLoaded><App /> </AuthIsLoaded></ReactReduxFirebaseProvider></Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}